@using System.Drawing;
@using MudBlazor;
@using Project_RMT.Interfaces;
@using Project_RMT.Models;
@using Router = Project_RMT.Models.Router;
@using System.Net;
@using Microsoft.AspNetCore.Components
@using System.Globalization;

<MudForm @ref="form">
    <MudDialog>
        <DialogContent>
            <MudGrid>
                <MudItem xs="12" md="12">
                    <MudTextField Style="background-color: grey;" T="string" Label="IPadress" @ref="ipField" />
                </MudItem>
                <MudItem xs="12" md="6">
                    <MudTextField Style="background-color: grey;" T="int" Label="X-Coordinates" @ref="xcoordinateField"/>
                </MudItem>
                <MudItem xs="12" md="6">
                    <MudTextField Style="background-color: grey;" T="int" Label="Y-Coordinates" @ref="ycoordinateField"/>
                </MudItem>
                <MudItem xs="12" md="12">
                    @if (NetworkInterfaces is not null && NetworkInterfaces.Count != 0)
                    {
                        <select multiple>
                            @foreach (var item in NetworkInterfaces)
                            {
                                <option value="@item" @onclick=@((e) => OptionClickEvent(@item,e))>@item.IPAdress.ToString()</option>
                            }
                        </select>

                        @foreach (var holderItem in options)
                        {
                            @holderItem
                        }
                    }
                </MudItem>
            </MudGrid>
            <MudButton @onclick="save" Variant="Variant.Filled" Color="MudBlazor.Color.Primary" Class="ml-auto">Register</MudButton>
        </DialogContent>
    </MudDialog>
</MudForm>


@code {
    [Parameter] public List<Router> NetworkInterfaces { get; set; }
    MudTextField<string> ipField;
    MudTextField<int> xcoordinateField;
    MudTextField<int> ycoordinateField;
    MudForm form;
    private HashSet<Router> options { get; set; } = new HashSet<Router>();
    private Router value { get; set; }

    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    private void Cancel()
    {
        MudDialog.Cancel();
    }

    private void save()
    {
        var newRouter = new Router()
        {
            Id = Guid.NewGuid(),
            Clients = new List<Models.Client>(),
            IPAdress = IPAddress.Parse(ipField.Value),
            NetworkInterfaces = new List<NetworkInterface>(),
            RoutingTable = new(),
            Coordinates = new Point(xcoordinateField.Value, ycoordinateField.Value)
        };

        foreach (var item in options)
        {
            newRouter.NetworkInterfaces.Add(new NetworkInterface() { Name = item.IPAdress.ToString(), ConnectedNetworkDevice = item });
        }

        MudDialog.Close(DialogResult.Ok(newRouter));
    }

    public void OptionClickEvent(Router value, MouseEventArgs evnt)
    {
            options.Add(value);
    }

}