@page "/algorithm"
@using MudBlazor;
@using Project_RMT.Core;
@using Project_RMT.Interfaces;
@using Project_RMT.Models;
@using Router = Project_RMT.Models.Router;
@using System.Drawing;
@inject SimulationEngine SimulationEngine
@inject IDialogService DialogService
<style>
    .grid{
        display: grid;
        justify-items: stretch;
        height: 80vw;
        width: 80vw;
        grid-template-columns: repeat(20, 1fr);
        grid-template-rows: repeat(20, 1fr);
    }
    .grid-cell{
        border: solid grey 1px;
        justify-self: stretch;
    }
    .modal{
        background-color: white;
    }
    
</style>
<PageTitle>Algorithm Visulization</PageTitle>

<h1>Simulation Page</h1>

<MudButton @onclick="() => InvokeModal()" Color="MudBlazor.Color.Surface" FullWidth=true >New Router</MudButton>
<MudGrid Class="grid">
    @for (int row = 0; row < 20; row++)
    {
        @for (int col = 0; col < 20; col++)
        {
            <MudItem Class="grid-cell">
            </MudItem>
        }
    }
</MudGrid>


@code {
    public string buttonText = "Simulation Starten";
    short networkDeviceCounter = 1;

    private void StartRouting()
    {
        SimulationEngine.UpdateRoutingtables();
    }

    private async Task InvokeModal()
    {
        var routerlist = new List<Router>();
        foreach (var item in SimulationEngine.Devices)
        {
            if (item is Router rudi)
            {
                routerlist.Add(rudi);
            }
        };

        var parameters = new DialogParameters<Router>();
        parameters.Add("NetworkInterfaces", routerlist);
        var options = new DialogOptions { CloseButton = true, ClassBackground = "modal" };
        var dialog = DialogService.Show<AddRouterModal>("AddRouter", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            if (result.Data is Router newRouter)
            {
                SimulationEngine.Devices.Add(newRouter);
            } 
        }
    }
}
